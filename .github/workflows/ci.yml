name: C++ CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    container:
      image: gcc:latest

    steps:
      - name: Install dependencies
        run: apt update && apt install -y cmake g++ ninja-build clang-tidy cppcheck

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure CMake
        run: cmake -B build -G "Ninja" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build project
        run: cmake --build build

      - name: Run tests
        id: test
        run: |
          ctest --test-dir build --output-on-failure | tee test_output.log
          echo "EXIT_CODE=$?" >> $GITHUB_ENV

      - name: Extract failing files
        if: env.EXIT_CODE != '0'
        run: |
          grep -oE '[^ ]+\.(cpp|h):[0-9]+' test_output.log | sort | uniq > failed_files.log || true

      - name: Get blame info
        if: env.EXIT_CODE != '0'
        run: |
          echo "ðŸš¨ Test failed! Blame info:" > blame_info.txt
          while IFS= read -r file; do
            echo "\n$file" >> blame_info.txt
            git blame -L $(echo $file | cut -d':' -f2) $(echo $file | cut -d':' -f1) >> blame_info.txt || echo "Blame info not available" >> blame_info.txt
          done < failed_files.log
          cat blame_info.txt

      - name: Send Discord notification on failure
        if: env.EXIT_CODE != '0'
        run: |
          BLAME_MSG=$(cat blame_info.txt | head -n 20 | jq -R -s '.')
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"ðŸš¨ Test run failed! Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\`\`\`${BLAME_MSG}\`\`\`\"}" \
               ${{ secrets.DISCORD_WEBHOOK }}
